<ROUTINE ADD-FOOD ("OPT" AMOUNT)
	<ADD-QUANTITY ,FOOD .AMOUNT ,PLAYER>>

<ROUTINE BUY-FOOD (PRICE)
	<BUY-STUFF ,FOOD ,FOOD-PLURAL .PRICE>>

<ROUTINE SELL-FOOD (PRICE)
	<SELL-STUFF ,FOOD ,FOOD-PLURAL .PRICE>>

<ROUTINE TAKE-FOOD ("OPT" AMOUNT)
	<RETURN <TAKE-STUFF ,FOOD ,FOOD-PLURAL .AMOUNT>>>

<ROUTINE CONSUME-FOOD ("OPT" AMOUNT JUMP "AUX" QUANTITY (RETURN-VALUE F))
	<COND (<NOT .AMOUNT> <SET AMOUNT 1>)>
	<COND (<CHECK-ITEM ,FOOD>
		<SET QUANTITY <GETP ,FOOD ,P?QUANTITY>>
		<COND (<G=? .QUANTITY .AMOUNT>
			<SET QUANTITY <- .QUANTITY .AMOUNT>>
			<PUTP ,FOOD ,P?QUANTITY .QUANTITY>
			<COND (<G=? .QUANTITY 1>
				<CRLF>
				<HLIGHT ,H-BOLD>
				<TELL "[Your supply of " D ,FOOD " decreased by " N .AMOUNT "]" CR>
				<HLIGHT 0>
			)(ELSE
				<EMPHASIZE ,EXHAUST-MESSAGE>
			)>
			<COND (.JUMP <STORY-JUMP .JUMP>)>
			<SET RETURN-VALUE T>
		)>
		<COND (<L? .QUANTITY 1>
			<PUTP ,FOOD ,P?QUANTITY 1>
			<REMOVE ,FOOD>
		)>
	)>
	<RETURN .RETURN-VALUE>>

<ROUTINE HAS-FOOD ("OPT" (THRESHOLD 0) "AUX" (QUANTITY 0))
	<COND (<CHECK-ITEM ,FOOD>
		<SET QUANTITY <GETP ,FOOD ,P?QUANTITY>>
		<COND (<G? .QUANTITY .THRESHOLD> <RTRUE>)>
	)>
	<RFALSE>>
